# .github/workflows/bounty-payout.yml
name: Bounty Payout

on:
  pull_request:
    types: [closed]

jobs:
  process-bounty:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check for linked issues with bounties
        id: check-issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body || '';
            
            // Look for issue closing keywords in PR body
            const issueRefs = prBody.match(/(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi);
            if (!issueRefs) {
              console.log('No issue references found in PR');
              return;
            }
            
            // Extract issue numbers
            const issueNumbers = issueRefs.map(ref => {
              const match = ref.match(/#(\d+)/);
              return match ? match[1] : null;
            }).filter(Boolean);
            
            if (issueNumbers.length === 0) {
              console.log('No valid issue numbers found');
              return;
            }
            
            console.log(`Found issue references: ${issueNumbers.join(', ')}`);
            
            // Check each issue for bounty labels
            let bountyIssue = null;
            for (const issueNumber of issueNumbers) {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber)
              });
              
              // Check for dollar sign labels
              const hasBountyLabel = issue.data.labels.some(label => {
                return label.name.includes('$');
              });
              
              if (hasBountyLabel) {
                bountyIssue = issue.data;
                break;
              }
            }
            
            if (!bountyIssue) {
              console.log('No issues with bounty labels found');
              return;
            }
            
            // Find the bounty amount from the label
            const bountyLabel = bountyIssue.labels.find(label => label.name.includes('$'));
            const bountyAmount = bountyLabel ? bountyLabel.name.match(/\$(\d+)/)[1] : null;
            
            if (!bountyAmount) {
              console.log('Could not extract bounty amount from label');
              return;
            }
            
            console.log(`Found bounty issue #${bountyIssue.number} with amount $${bountyAmount}`);
            
            core.setOutput('has-bounty', 'true');
            core.setOutput('issue-number', bountyIssue.number.toString());
            core.setOutput('bounty-amount', bountyAmount);
            core.setOutput('contributor-username', pr.user.login);
            
      - name: Send bounty data to BLT
        if: steps.check-issues.outputs.has-bounty == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = steps.check-issues.outputs['issue-number'];
            const bountyAmount = steps.check-issues.outputs['bounty-amount'];
            const contributorUsername = steps.check-issues.outputs['contributor-username'];
            
            // Get the API base URL (for local development vs production)
            const apiBaseUrl = process.env.API_BASE_URL || 'https://owasp.org';
            
            // Send data to the BLT endpoint
            const axios = require('axios');
            try {
              const response = await axios.post(`${apiBaseUrl}/bounty_payout/`, {
                issue_number: parseInt(issueNumber),
                repo: context.repo.repo,
                owner: context.repo.owner,
                bounty_amount: parseInt(bountyAmount),
                contributor_username: contributorUsername,
                pr_number: context.payload.pull_request.number,
                token: process.env.BLT_API_TOKEN
              });
              
              console.log(`Bounty payout request sent: ${response.status}`);
              console.log(response.data);
            } catch (error) {
              console.error('Error sending bounty payout request:', error.message);
              if (error.response) {
                console.error('Response data:', error.response.data);
              }
            }
        # env:
        #   BLT_API_TOKEN: ${{ secrets.BLT_API_TOKEN }}
        #   API_BASE_URL: ${{ secrets.API_BASE_URL }}
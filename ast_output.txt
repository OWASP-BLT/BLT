Module(
    body=[
        Import(
            names=[
                alias(name='math')]),
        Import(
            names=[
                alias(name='numpy', asname='np')]),
        ImportFrom(
            module='typing',
            names=[
                alias(name='List'),
                alias(name='Dict'),
                alias(name='Optional')],
            level=0),
        Assign(
            targets=[
                Name(id='PI', ctx=Store())],
            value=Constant(value=3.14)),
        FunctionDef(
            name='square',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='x')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Return(
                    value=BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Mult(),
                        right=Name(id='x', ctx=Load())))],
            decorator_list=[]),
        FunctionDef(
            name='greet',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='name',
                        annotation=Name(id='str', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[
                    Constant(value='World')]),
            body=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            JoinedStr(
                                values=[
                                    Constant(value='Hello, '),
                                    FormattedValue(
                                        value=Name(id='name', ctx=Load()),
                                        conversion=-1),
                                    Constant(value='!')])],
                        keywords=[])),
                Return(
                    value=JoinedStr(
                        values=[
                            Constant(value='Greeting sent to '),
                            FormattedValue(
                                value=Name(id='name', ctx=Load()),
                                conversion=-1)]))],
            decorator_list=[
                Name(id='staticmethod', ctx=Load())],
            returns=Name(id='str', ctx=Load())),
        Try(
            body=[
                With(
                    items=[
                        withitem(
                            context_expr=Call(
                                func=Name(id='open', ctx=Load()),
                                args=[
                                    Constant(value='file.txt'),
                                    Constant(value='w')],
                                keywords=[
                                    keyword(
                                        arg='encoding',
                                        value=Constant(value='utf-8'))]),
                            optional_vars=Name(id='f', ctx=Store()))],
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='f', ctx=Load()),
                                    attr='write',
                                    ctx=Load()),
                                args=[
                                    Constant(value='Hello, world!')],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    Constant(value='Successfully wrote to file.')],
                                keywords=[]))])],
            handlers=[
                ExceptHandler(
                    type=Name(id='FileNotFoundError', ctx=Load()),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    Constant(value='Error: The directory for the file does not exist.')],
                                keywords=[]))]),
                ExceptHandler(
                    type=Name(id='PermissionError', ctx=Load()),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    Constant(value='Error: You do not have permission to write to this file.')],
                                keywords=[]))]),
                ExceptHandler(
                    type=Name(id='Exception', ctx=Load()),
                    name='e',
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    JoinedStr(
                                        values=[
                                            Constant(value='An unexpected error occurred: '),
                                            FormattedValue(
                                                value=Name(id='e', ctx=Load()),
                                                conversion=-1)])],
                                keywords=[]))])],
            orelse=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value='File operation completed successfully.')],
                        keywords=[]))],
            finalbody=[
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value='This will always run, whether an exception occurred or not.')],
                        keywords=[]))]),
        ClassDef(
            name='Circle',
            bases=[],
            keywords=[],
            body=[
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(arg='radius')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='radius',
                                    ctx=Store())],
                            value=Name(id='radius', ctx=Load()))],
                    decorator_list=[]),
                FunctionDef(
                    name='area',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=BinOp(
                                left=Name(id='PI', ctx=Load()),
                                op=Mult(),
                                right=Call(
                                    func=Name(id='square', ctx=Load()),
                                    args=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='radius',
                                            ctx=Load())],
                                    keywords=[])))],
                    decorator_list=[])],
            decorator_list=[]),
        If(
            test=Compare(
                left=Name(id='__name__', ctx=Load()),
                ops=[
                    Eq()],
                comparators=[
                    Constant(value='__main__')]),
            body=[
                Assign(
                    targets=[
                        Name(id='c', ctx=Store())],
                    value=Call(
                        func=Name(id='Circle', ctx=Load()),
                        args=[
                            Constant(value=5)],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='c', ctx=Load()),
                                    attr='area',
                                    ctx=Load()),
                                args=[],
                                keywords=[])],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='greet', ctx=Load()),
                        args=[],
                        keywords=[]))],
            orelse=[])],
    type_ignores=[])
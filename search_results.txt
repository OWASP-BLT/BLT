--- Match 1 ---
File: website/views/slackbot.py
Similarity Score: 0.7032
Chunk:
blocks = [
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": (
                        f"Here are the OWASP Projects matching *{search_term}* "
                        f"(page {current_page + 1}/{total_pages}):\n{text_chunk}"
                    ),
                },
            },
            {"type": "actions", "elements": []},
        ]
--------------------------------------------------------------------------------

--- Match 2 ---
File: website/views/slackbot.py
Similarity Score: 0.6987
Chunk:
found_urls = url_pattern.findall(desc)
                        if found_urls:
                            link = found_urls[0]
                            link_label = "Website"
                        else:
                            link = f"https://owasp.org/www-project-{repo['name'].lower()}"
                            link_label = "Wiki"
--------------------------------------------------------------------------------

--- Match 3 ---
File: website/views/slack_handlers.py
Similarity Score: 0.6961
Chunk:
def send_committee_page(client, user_id, committees):
    """Send a page of committee repositories to the user"""
    try:
        blocks = [
            {"type": "header", "text": {"type": "plain_text", "text": "üåç OWASP Committees", "emoji": True}},
            {"type": "divider"},
        ]

        for committee in committees:
            # Format committee name
            committee_name = committee["name"].replace("www-committees-", "").replace("-", " ").title()

            blocks.append(
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": (
                            f"*{committee_name}*\n"
                            f"üìù {committee.get('description', 'No description available')}\n"
                            f"‚≠ê Stars: {committee['stargazers_count']} | "
                            f"üëÄ Watchers: {committee['watchers_count']} | "
                            f"üîÑ Forks: {committee['forks_count']}"
                        ),
                    },
                }
            )

        # Add navigation buttons
        navigation = {"type": "actions", "elements": []}

        data = pagination_data.get(user_id, {})
        current_page = data.get("current_page", 0)
        total_pages = math.ceil(len(data.get("repos", [])) / data.get("page_size", 5))

        if current_page > 0:
            navigation["elements"].append(
                {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "‚óÄÔ∏è Previous", "emoji": True},
                    "value": "prev",
                    "action_id": "committees_prev",
                }
            )

        if current_page < total_pages - 1:
            navigation["elements"].append(
                {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "Next ‚ñ∂Ô∏è", "emoji": True},
                    "value": "next",
                    "action_id": "committees_next",
                }
            )

        # Add committee selector
        if committees:
            navigation["elements"].append(
                {
                    "type": "static_select",
                    "placeholder": {"type": "plain_text", "text": "View Committee Details", "emoji": True},
                    "options": [
                        {
                            "text": {
                                "type": "plain_text",
                                "text": committee["name"].replace("www-committees-", "").replace("-", " ").title(),
                                "emoji": True,
                            },
                            "value": committee["name"],
                        }
                        for committee in committees
                    ],
                    "action_id": "select_committee",
                }
            )

        blocks.append(navigation)

        send_dm(client, user_id, "OWASP Committees", blocks)

    except Exception as e:
        print(f"Error sending committee page: {str(e)}")
--------------------------------------------------------------------------------

--- Match 4 ---
File: website/views/company.py
Similarity Score: 0.6881
Chunk:
class OrganizationDashboardTeamOverviewView(View):
    @validate_organization_user
    def get(self, request, id, *args, **kwargs):
        sort_field = request.GET.get("sort", "date")
        sort_direction = request.GET.get("direction", "desc")

        # For authenticated users, show organizations they have access to
        if request.user.is_authenticated:
            organizations = (
                Organization.objects.values("name", "id")
                .filter(Q(managers__in=[request.user]) | Q(admin=request.user))
                .distinct()
            )
        else:
            # For unauthenticated users, don't show organization list
            organizations = []

        organization_obj = Organization.objects.filter(id=id).first()

        team_members = UserProfile.objects.filter(team=organization_obj)
        team_member_users = [member.user for member in team_members]

        if request.headers.get("X-Requested-With") == "XMLHttpRequest":
            filter_type = request.GET.get("filter_type")
            filter_value = request.GET.get("filter_value")

            reports = DailyStatusReport.objects.filter(user__in=team_member_users)

            if filter_type == "user":
                reports = reports.filter(user_id=filter_value)
            elif filter_type == "date":
                reports = reports.filter(date=filter_value)
            elif filter_type == "goal":
                reports = reports.filter(goal_accomplished=filter_value == "true")
            elif filter_type == "task":
                reports = reports.filter(previous_work__icontains=filter_value)

            data = []
            for report in reports:
                data.append(
                    {
                        "username": report.user.username,
                        "avatar_url": (
                            report.user.userprofile.user_avatar.url if report.user.userprofile.user_avatar else None
                        ),
                        "date": report.date.strftime("%B %d, %Y"),
                        "previous_work": report.previous_work,
                        "next_plan": report.next_plan,
                        "blockers": report.blockers,
                        "goal_accomplished": report.goal_accomplished,
                        "current_mood": report.current_mood,
                    }
                )
            return JsonResponse({"data": data})

        daily_status_reports = DailyStatusReport.objects.filter(user__in=team_member_users)

        sort_prefix = "-" if sort_direction == "desc" else ""
        sort_mapping = {
            "date": "date",
            "username": "user__username",
            "mood": "current_mood",
            "goal": "goal_accomplished",
        }

        if sort_field in sort_mapping:
            daily_status_reports = daily_status_reports.order_by(f"{sort_prefix}{sort_mapping[sort_field]}")

        context = {
            "organization": id,
            "organizations": organizations,
            "organization_obj": organization_obj,
            "team_members": team_members,
            "daily_status_reports": daily_status_reports,
            "current_sort": sort_field,
            "current_direction": sort_direction,
        }

        return render(request, "organization/organization_team_overview.html", context=context)
--------------------------------------------------------------------------------

--- Match 5 ---
File: website/views/slack_handlers.py
Similarity Score: 0.6837
Chunk:
def get_committee_details(repo_name, headers, workspace_client, user_id):
    """Get detailed information about a specific committee repository"""
    try:
        # Get repository details
        repo_url = f"https://api.github.com/repos/OWASP/{repo_name}"
        repo_response = requests.get(repo_url, headers=headers, timeout=10)

        if repo_response.status_code == 404:
            return JsonResponse(
                {"response_type": "ephemeral", "text": f"‚ùå Committee repository '{repo_name}' not found."}
            )
        elif repo_response.status_code != 200:
            return JsonResponse({"response_type": "ephemeral", "text": "‚ùå Failed to fetch committee details."})

        repo = repo_response.json()

        # Get contributors count
        contributors_url = f"https://api.github.com/repos/OWASP/{repo_name}/contributors"
        contributors_response = requests.get(contributors_url, headers=headers, timeout=10)
        contributors_count = len(contributors_response.json()) if contributors_response.status_code == 200 else 0

        # Get languages
        languages_url = f"https://api.github.com/repos/OWASP/{repo_name}/languages"
        languages_response = requests.get(languages_url, headers=headers, timeout=10)
        languages = list(languages_response.json().keys()) if languages_response.status_code == 200 else []

        # Format committee name
        committee_name = repo_name.replace("www-committees-", "").replace("-", " ").title()

        blocks = [
            {
                "type": "header",
                "text": {"type": "plain_text", "text": f"üåç OWASP {committee_name} Committee", "emoji": True},
            },
            {"type": "divider"},
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": (
                        f"*About:*\n{repo.get('description', 'No description available')}\n\n"
                        f"*Stats:*\n"
                        f"‚Ä¢ üë• Contributors: {contributors_count}\n"
                        f"‚Ä¢ ‚≠ê Stars: {repo['stargazers_count']}\n"
                        f"‚Ä¢ üëÄ Watchers: {repo['watchers_count']}\n"
                        f"‚Ä¢ üîÑ Forks: {repo['forks_count']}\n\n"
                        f"*Tech Stack:*\n{', '.join(languages) if languages else 'No languages detected'}"
                    ),
                },
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {"type": "plain_text", "text": "View Repository", "emoji": True},
                        "url": repo["html_url"],
                        "action_id": "view_committee_repo",
                    }
                ],
            },
        ]

        send_dm(workspace_client, user_id, f"OWASP {committee_name} Committee", blocks)
        return JsonResponse(
            {
                "response_type": "ephemeral",
                "text": f"I've sent you the details for the {committee_name} committee in a DM! üåç",
            }
        )

    except Exception as e:
        print(f"Error getting committee details: {str(e)}")
        return JsonResponse(
            {"response_type": "ephemeral", "text": "‚ùå An error occurred while fetching committee details."}
        )
--------------------------------------------------------------------------------

--- Match 6 ---
File: website/views/slack_handlers.py
Similarity Score: 0.6827
Chunk:
def send_paged_results(client, user_id, search_term):
    """Sends the current page of matched projects to the user with next/prev buttons if needed."""
    data = pagination_data[user_id]
    matched = data["matched"]
    page_size = data["page_size"]
    total_pages = math.ceil(len(matched) / page_size)
    current_page = data["current_page"]

    start_idx = current_page * page_size
    end_idx = start_idx + page_size
    chunk = matched[start_idx:end_idx]

    # Create header block
    blocks = [
        {
            "type": "header",
            "text": {"type": "plain_text", "text": f"üîç OWASP Projects matching '{search_term}'", "emoji": True},
        },
        {
            "type": "context",
            "elements": [
                {"type": "mrkdwn", "text": f"Found {len(matched)} projects ‚Ä¢ Page {current_page + 1} of {total_pages}"}
            ],
        },
        {"type": "divider"},
    ]

    # Add project block
    for idx, project in enumerate(chunk, start=start_idx + 1):
        blocks.extend(
            [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": (
                            f"*{idx}. <{project['html_url']}|{project['name']}>*\n"
                            f"{project['description']}\n"
                            f"{project.get('extra_info', '')}\n"
                            f"{project['link_label']}: <{project['link']}|Link>"
                        ),
                    },
                },
                {"type": "divider"} if idx < end_idx else None,
            ]
        )

    # Remove None blocks
    blocks = [b for b in blocks if b is not None]

    # Add navigation buttons
    navigation = {"type": "actions", "elements": []}

    if current_page > 0:
        navigation["elements"].append(
            {
                "type": "button",
                "text": {"type": "plain_text", "text": "‚óÄÔ∏è Previous", "emoji": True},
                "value": "PREV",
                "action_id": "pagination_prev",
            }
        )

    if current_page < (total_pages - 1):
        navigation["elements"].append(
            {
                "type": "button",
                "text": {"type": "plain_text", "text": "Next ‚ñ∂Ô∏è", "emoji": True},
                "value": "NEXT",
                "action_id": "pagination_next",
            }
        )

    # Add repository selector
    if chunk:
        navigation["elements"].append(
            {
                "type": "static_select",
                "placeholder": {"type": "plain_text", "text": "View Repository Issues", "emoji": True},
                "options": [
                    {
                        "text": {"type": "plain_text", "text": project["name"], "emoji": True},
                        "value": project["owner_repo"],
                    }
                    for project in chunk
                ],
                "action_id": "select_repository",
            }
        )

    blocks.append(navigation)

    send_dm(client, user_id, f"Found {len(matched)} matching OWASP projects.", blocks)
--------------------------------------------------------------------------------

--- Match 7 ---
File: website/views/company.py
Similarity Score: 0.6827
Chunk:
class OrganizationDashboardManageBugsView(View):
    @validate_organization_user
    def get(self, request, id, *args, **kwargs):
        # For authenticated users, show all organizations they have access to
        if request.user.is_authenticated:
            organizations = (
                Organization.objects.values("name", "id")
                .filter(Q(managers__in=[request.user]) | Q(admin=request.user))
                .distinct()
            )
        else:
            # For unauthenticated users, don't show organization list
            organizations = []

        # Get the organization object
        organization_obj = Organization.objects.filter(id=id).first()
        if not organization_obj:
            messages.error(request, "Organization does not exist")
            return redirect("home")

        # Get all issues for this organization, ordered by creation date
        issues = Issue.objects.filter(domain__organization_id=id).order_by("-created")

        context = {
            "organization": id,
            "organizations": organizations,
            "organization_obj": organization_obj,
            "issues": issues,
        }
        return render(request, "organization/organization_manage_bugs.html", context=context)
--------------------------------------------------------------------------------

--- Match 8 ---
File: website/views/company.py
Similarity Score: 0.6821
Chunk:
class OrganizationDashboardManageBughuntView(View):
    @validate_organization_user
    def get(self, request, id, *args, **kwargs):
        # For authenticated users, show all organizations they have access to
        if request.user.is_authenticated:
            organizations = (
                Organization.objects.values("name", "id")
                .filter(Q(managers__in=[request.user]) | Q(admin=request.user))
                .distinct()
            )
        else:
            # For unauthenticated users, don't show organization list
            organizations = []

        # Get the organization object
        organization_obj = Organization.objects.filter(id=id).first()
        if not organization_obj:
            messages.error(request, "Organization does not exist")
            return redirect("home")

        query = Hunt.objects.values(
            "id",
            "name",
            "prize",
            "is_published",
            "result_published",
            "starts_on__day",
            "starts_on__month",
            "starts_on__year",
            "end_on__day",
            "end_on__month",
            "end_on__year",
        ).filter(domain__organization__id=id)
        filtered_bughunts = {
            "all": query,
            "ongoing": query.filter(result_published=False, is_published=True),
            "ended": query.filter(result_published=True),
            "draft": query.filter(result_published=False, is_published=False),
        }

        filter_type = request.GET.get("filter", "all")

        context = {
            "organization": id,
            "organization_obj": organization_obj,
            "organizations": organizations,
            "bughunts": filtered_bughunts.get(filter_type, []),
        }

        return render(request, "organization/bughunt/organization_manage_bughunts.html", context)
--------------------------------------------------------------------------------

--- Match 9 ---
File: website/views/slackbot.py
Similarity Score: 0.6746
Chunk:
blocks = [
                                {
                                    "type": "section",
                                    "text": {
                                        "type": "mrkdwn",
                                        "text": "Here are the OWASP BLT project repositories:\n" + "\n".join(repo_list),
                                    },
                                },
                                {
                                    "type": "actions",
                                    "elements": [
                                        {
                                            "type": "static_select",
                                            "placeholder": {
                                                "type": "plain_text",
                                                "text": "Select a repository to view issues",
                                            },
                                            "options": [
                                                {
                                                    "text": {
                                                        "type": "plain_text",
                                                        "text": f"{repo['name']}",
                                                    },
                                                    "value": f"OWASP-BLT/{repo['name']}",
                                                }
                                                for repo in repos
                                            ],
                                            "action_id": "select_repository",
                                        }
                                    ],
                                },
                            ]
--------------------------------------------------------------------------------

--- Match 10 ---
File: website/views/company.py
Similarity Score: 0.6746
Chunk:
def dashboard_view(request, *args, **kwargs):
    user = request.user

    organization, error_message = _get_user_organization(user)
    if error_message:
        messages.error(request, error_message)
        if error_message == "Email not verified.":
            return redirect("/")
        elif error_message == "Please login to access your organization.":
            return redirect("/accounts/login/")
        else:
            return redirect("register_organization")

    # Redirect to organization dashboard
    return redirect("organization_analytics", id=organization.id)
--------------------------------------------------------------------------------

--- Match 11 ---
File: website/views/core.py
Similarity Score: 0.6745
Chunk:
def check_owasp_compliance(request):
    """
    View to check OWASP project compliance with guidelines.
    Combines form and results in a single template.
    """
    if request.method == "POST":
        url = request.POST.get("url", "").strip()
        if not url:
            messages.error(request, "Please provide a valid URL")
            return redirect("check_owasp_compliance")

        # SSRF Fix: Validate and sanitize URL first
        try:
            safe_url = rebuild_safe_url(url)
            if not safe_url:
                messages.error(request, "Invalid or unsafe URL provided")
                return redirect("check_owasp_compliance")
        except ValueError as e:
            messages.error(request, f"Error processing URL: {str(e)}")
            return redirect("check_owasp_compliance")
        try:
            # Parse URL to determine if it's a GitHub repository
            parsed_url = urlparse(safe_url)
            is_github = "github.com" == parsed_url.hostname.lower()
            is_owasp_org = is_github and parsed_url.path.lower().startswith("/owasp/")

            # Fetch and analyze website content
            response = requests.get(safe_url, timeout=10, verify=True, allow_redirects=False)
            soup = BeautifulSoup(response.text.lower(), "html.parser")
            content = soup.get_text().lower()

            # Check for OWASP mentions and links
            has_owasp_mention = "owasp" in content
            has_project_link = any(
                "owasp.org/www-project-" in link.get("href", "").lower() for link in soup.find_all("a")
            )

            # Check for dates to determine if content is up-to-date
            date_patterns = [
                r"\b\d{4}-\d{2}-\d{2}\b",  # YYYY-MM-DD
                r"\b\d{2}/\d{2}/\d{4}\b",  # DD/MM/YYYY
                r"\b(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]* \d{1,2},? \d{4}\b",  # Month DD, YYYY
            ]
            has_dates = any(re.search(pattern, content, re.IGNORECASE) for pattern in date_patterns)

            # Check for potential paywall indicators
            paywall_indicators = [
                "premium",
                "subscription",
                "upgrade to",
                "paid version",
                "enterprise plan",
                "pro version",
            ]
            has_paywall_indicators = any(indicator in content for indicator in paywall_indicators)

            # Compile recommendations
            recommendations = []
            if not is_owasp_org:
                recommendations.append("Project should be hosted under the OWASP GitHub organization")
            if not has_owasp_mention:
                recommendations.append("Website should clearly state it is an OWASP project")
            if not has_project_link:
                recommendations.append("Website should link to the OWASP project page")
            if has_paywall_indicators:
                recommendations.append("Check if the project has features behind a paywall")

            context = {
                "url": safe_url,
                "github_compliance": {
                    "github_hosted": is_github,
                    "under_owasp_org": is_owasp_org,
                },
                "website_compliance": {
                    "has_owasp_mention": has_owasp_mention,
                    "has_project_link": has_project_link,
                    "has_dates": has_dates,
                },
                "vendor_neutrality": {
                    "possible_paywall": has_paywall_indicators,
                },
                "recommendations": recommendations,
                "overall_status": "compliant" if not recommendations else "needs_improvement",
            }

            return render(request, "check_owasp_compliance.html", context)

        except requests.RequestException as e:
            messages.error(request, f"Error accessing the URL: {str(e)}. Please check if the URL is accessible.")
        except Exception as e:
            messages.error(request, f"Error checking compliance: {str(e)}. Please try again.")

    return render(request, "check_owasp_compliance.html")
--------------------------------------------------------------------------------

--- Match 12 ---
File: website/views/slackbot.py
Similarity Score: 0.6738
Chunk:
# Also keep the static_select for issues
        if options:
            blocks[1]["elements"].append(
                {
                    "type": "static_select",
                    "placeholder": {
                        "type": "plain_text",
                        "text": "Select a repository to view its latest issues",
                    },
                    "options": options,
                    "action_id": "select_repository",
                }
            )
        send_dm(client, user_id, f"Found {len(matched)} matching OWASP projects.", blocks)
--------------------------------------------------------------------------------

--- Match 13 ---
File: website/api/views.py
Similarity Score: 0.6710
Chunk:
class OwaspComplianceChecker(APIView):
    """
    API endpoint to check OWASP project compliance criteria for a given URL
    """

    permission_classes = [AllowAny]

    def check_github_compliance(self, url):
        """Check GitHub-related compliance criteria"""
        try:
            parsed_url = urlparse(url)
            is_github = parsed_url.netloc == "github.com"
            is_owasp_org = parsed_url.path.startswith("/OWASP/")

            return {
                "github_hosted": is_github,
                "under_owasp_org": is_owasp_org,
                "details": {"url_checked": url, "recommendations": []},
            }
        except Exception:
            return {
                "github_hosted": False,
                "under_owasp_org": False,
                "details": {"url_checked": url, "error": "Unable to parse GitHub URL"},
            }

    def check_website_compliance(self, url):
        """Check website-related compliance criteria"""
        try:
            response = requests.get(url, timeout=10)
            soup = BeautifulSoup(response.text, "html.parser")

            # Check for OWASP mention
            content = soup.get_text().lower()
            has_owasp_mention = "owasp" in content

            # Check for project page link
            owasp_links = [a for a in soup.find_all("a") if "owasp.org" in a.get("href", "")]
            has_project_link = len(owasp_links) > 0

            # Check for up-to-date info
            has_dates = bool(soup.find_all(["time", "date"]))

            return {
                "has_owasp_mention": has_owasp_mention,
                "has_project_link": has_project_link,
                "has_dates": has_dates,
                "details": {"url_checked": url, "recommendations": []},
            }
        except Exception as e:
            return {
                "has_owasp_mention": False,
                "has_project_link": False,
                "has_dates": False,
                "details": {"url_checked": url, "error": str(e)},
            }

    def check_vendor_neutrality(self, url):
        """Check vendor neutrality compliance"""
        try:
            response = requests.get(url, timeout=10)
            soup = BeautifulSoup(response.text, "html.parser")

            # Look for common paywall terms
            paywall_terms = ["premium", "subscribe", "subscription", "pay", "pricing"]
            content = soup.get_text().lower()
            has_paywall_indicators = any(term in content for term in paywall_terms)

            return {"possible_paywall": has_paywall_indicators, "details": {"url_checked": url, "recommendations": []}}
        except Exception:
            return {
                "possible_paywall": None,
                "details": {"url_checked": url, "error": "Unable to check vendor neutrality"},
            }

    def post(self, request, *args, **kwargs):
        url = request.data.get("url")
        if not url:
            return Response({"error": "URL is required"}, status=status.HTTP_400_BAD_REQUEST)

        # Run all compliance checks
        github_check = self.check_github_compliance(url)
        website_check = self.check_website_compliance(url)
        vendor_check = self.check_vendor_neutrality(url)

        # Compile recommendations
        recommendations = []
        if not github_check["under_owasp_org"]:
            recommendations.append("Project should be hosted under the OWASP GitHub organization")
        if not website_check["has_owasp_mention"]:
            recommendations.append("Website should clearly state it is an OWASP project")
        if not website_check["has_project_link"]:
            recommendations.append("Website should link to the OWASP project page")
        if vendor_check["possible_paywall"]:
            recommendations.append("Check if the project has features behind a paywall")

        report = {
            "url": url,
            "compliance_status": {"github": github_check, "website": website_check, "vendor_neutrality": vendor_check},
            "recommendations": recommendations,
            "overall_status": "needs_improvement" if recommendations else "compliant",
        }

        return Response(report, status=status.HTTP_200_OK)
--------------------------------------------------------------------------------

--- Match 14 ---
File: website/views/core.py
Similarity Score: 0.6700
Chunk:
class RoadmapView(TemplateView):
    template_name = "roadmap.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        milestones = [
            {
                "title": "üì∫ BLTV - BLT Eduction",
                "due_date": "No due date",
                "last_updated": "about 3 hours ago",
                "description": "Add an educational component to BLT so that users can learn along w‚Ä¶",
                "progress": "100%",
                "open": 0,
                "closed": 1,
            },
            {
                "title": "üöÄ Code Reviewer Leaderboard",
                "due_date": "No due date",
                "last_updated": "1 day ago",
                "description": "Here's an Emoji Code Reviewer Leaderboard idea, ranking reviewers b‚Ä¶",
                "progress": "50%",
                "open": 1,
                "closed": 1,
            },
            {
                "title": "Bid on Issues",
                "due_date": "No due date",
                "last_updated": "1 day ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üè† Improvements",
                "due_date": "No due date",
                "last_updated": "5 days ago",
                "description": "",
                "progress": "46%",
                "open": 7,
                "closed": 6,
            },
            {
                "title": "üîí Protection Of Online Privacy",
                "due_date": "No due date",
                "last_updated": "8 days ago",
                "description": "Web Monitoring System Implementation Plan Overview Enhances user tr‚Ä¶",
                "progress": "88%",
                "open": 1,
                "closed": 8,
            },
            {
                "title": "üß† AI",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "50%",
                "open": 1,
                "closed": 1,
            },
            {
                "title": "üîß App Improvements",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "0%",
                "open": 16,
                "closed": 0,
            },
            {
                "title": "üõ°Ô∏è OWASP tools",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "0%",
                "open": 2,
                "closed": 0,
            },
            {
                "title": "üß∞ Extension Improvements",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "0%",
                "open": 4,
                "closed": 0,
            },
            {
                "title": "üèÜ Sponsorship in app",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üé§ GitHub Sportscaster",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "ü•ó Daily Check-ins",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "New Project: Fresh - Daily Check-In Component for BLT Fresh is a pr‚Ä¶",
                "progress": "18%",
                "open": 9,
                "closed": 2,
            },
            {
                "title": "üî• Time Tracking",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "Simplified Project: Sizzle - Multi-Platform Time Tracking for BLT P‚Ä¶",
                "progress": "12%",
                "open": 14,
                "closed": 2,
            },
            {
                "title": "üõ°Ô∏è Trademark Defense",
                "due_date": "No due date",
                "last_updated": "10 days ago",
                "description": "Protects brand integrity and legal standing, important for long-ter‚Ä¶",
                "progress": "30%",
                "open": 7,
                "closed": 3,
            },
            {
                "title": "üè¢ Organization Portal in App",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üíå Invites in app",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üåç Banned Apps Simulation in app",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "Simulate app behavior in countries with restrictions to ensure compliance "
                "and accessibility.",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "ü§ñ Slack Bot 2.0",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 12,
                "closed": 0,
            },
            {
                "title": "üöÄ OWASP BLT Adventures",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üåê Organizations",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "Project: Refactor BLT Website to Combine Companies and Teams into O‚Ä¶",
                "progress": "0%",
                "open": 4,
                "closed": 0,
            },
            {
                "title": "üîß Maintenance",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "General maintenance issues",
                "progress": "50%",
                "open": 16,
                "closed": 16,
            },
            {
                "title": "Bug / Issue / Project tools",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üèÜ Gamification",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "Project Summary: Gamification Integration for BLT Platform The gami‚Ä¶",
                "progress": "15%",
                "open": 17,
                "closed": 3,
            },
            {
                "title": "GSOC tools",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "",
                "progress": "0%",
                "open": 3,
                "closed": 0,
            },
            {
                "title": "üöÄüé®üîÑ Tailwind Migration",
                "due_date": "No due date",
                "last_updated": "11 days ago",
                "description": "Migrate the remaining pages to tailwind "
                "https://blt.owasp.org/template_list/?sort=has_style_tags",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üêû New Issue Detail Page",
                "due_date": "No due date",
                "last_updated": "13 days ago",
                "description": "Improves issue tracking efficiency and developer experience on the site.",
                "progress": "66%",
                "open": 3,
                "closed": 6,
            },
            {
                "title": "ü•ì BACON",
                "due_date": "No due date",
                "last_updated": "21 days ago",
                "description": "ü•ì BACON: Blockchain Assisted Contribution Network BACON is a cuttin‚Ä¶",
                "progress": "50%",
                "open": 7,
                "closed": 7,
            },
            {
                "title": "üí∞ Multi-Crypto Donations",
                "due_date": "No due date",
                "last_updated": "about 1 month ago",
                "description": "Overview: The Decentralized Multi-Crypto Payment Integration featur‚Ä¶",
                "progress": "25%",
                "open": 6,
                "closed": 2,
            },
            {
                "title": "üí° Suggestions",
                "due_date": "No due date",
                "last_updated": "about 1 month ago",
                "description": "",
                "progress": "50%",
                "open": 1,
                "closed": 1,
            },
            {
                "title": "üí∏ Pledge",
                "due_date": "No due date",
                "last_updated": "3 months ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üåòDark Mode",
                "due_date": "No due date",
                "last_updated": "3 months ago",
                "description": "",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üë∑ Contributor Ranking",
                "due_date": "No due date",
                "last_updated": "3 months ago",
                "description": "üåûüíªü•â Shows contributor github username, commits, issues opened, issu‚Ä¶",
                "progress": "80%",
                "open": 1,
                "closed": 4,
            },
            {
                "title": "‚úÖ Bug Verifiers",
                "due_date": "No due date",
                "last_updated": "3 months ago",
                "description": "Ensures bug fixes are valid and effective, maintaining site integrity.",
                "progress": "50%",
                "open": 1,
                "closed": 1,
            },
            {
                "title": "ü§ñ Artificial Intelligence",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "",
                "progress": "100%",
                "open": 0,
                "closed": 2,
            },
            {
                "title": "üïπÔ∏è Penteston Integration",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "Enhances site security through integrated pentesting tools. We will‚Ä¶",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üîî Follower notifications",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "The feature would allow users to follow a company's bug reports and‚Ä¶",
                "progress": "0%",
                "open": 1,
                "closed": 0,
            },
            {
                "title": "üìä Review Queue",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "Streamlines content moderation, improving site quality.",
                "progress": "0%",
                "open": 3,
                "closed": 0,
            },
            {
                "title": "üïµÔ∏è Private Bug Bounties",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "Allows companies to conduct private, paid bug bounties in a non-com‚Ä¶",
                "progress": "25%",
                "open": 3,
                "closed": 1,
            },
            {
                "title": "üì° Cyber Dashboard",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "üåûüíªü•â a comprehensive dashboard of stats and information for organiza‚Ä¶",
                "progress": "0%",
                "open": 13,
                "closed": 0,
            },
            {
                "title": "ü™ù Webhooks",
                "due_date": "No due date",
                "last_updated": "7 months ago",
                "description": "automate the synchronization of issue statuses between GitHub and t‚Ä¶",
                "progress": "0%",
                "open": 2,
                "closed": 0,
            },
            {
                "title": "üî∏ Modern Front-End Redesign with React & Tailwind CSS (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "A complete redesign of BLT's interface, improving accessibility, usability, "
                "and aesthetics. The new front-end will be built with React and Tailwind CSS, "
                "ensuring high performance while maintaining a lightweight architecture under "
                "100MB. Dark mode will be the default, with full responsiveness and an enhanced "
                "user experience.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ Organization Dashboard ‚Äì Enhanced Vulnerability & Bug Management (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Redesign and expand the organization dashboard to provide seamless management of bug "
                "bounties, security reports, and contributor metrics. Features will include advanced "
                "filtering, real-time analytics, and improved collaboration tools for security teams.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ Secure API Development & Migration to Django Ninja (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Migrate our existing and develop a secure, well-documented API with automated "
                "security tests to support the new front-end. This may involve migrating from Django "
                "Rest Framework to Django Ninja for improved performance, maintainability, and API "
                "efficiency.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ Gamification & Blockchain Rewards System (Ordinals & Solana) (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Introduce GitHub-integrated contribution tracking that rewards security "
                "researchers with Bitcoin Ordinals and Solana-based incentives. This will "
                "integrate with other parts of the website as well such as daily check-ins "
                "and code quality. Gamification elements such as badges, leaderboards, and "
                "contribution tiers will encourage engagement and collaboration in "
                "open-source security.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ Decentralized Bidding System for Issues (Bitcoin Cash Integration) (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Create a decentralized system where developers can bid on GitHub issues "
                "using Bitcoin Cash, ensuring direct transactions between contributors and "
                "project owners without BLT handling funds.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ AI-Powered Code Review & Smart Prioritization System for Maintainers (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Develop an AI-driven GitHub assistant that analyzes pull requests, detects "
                "security vulnerabilities, and provides real-time suggestions for improving "
                "code quality. A smart prioritization system will help maintainers rank issues "
                "based on urgency, community impact, and dependencies.",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
            {
                "title": "üî∏ Enhanced Slack Bot & Automation System (~350h)",
                "due_date": "No due date",
                "last_updated": "",
                "description": "Expand the BLT Slack bot to automate vulnerability tracking, send real-time "
                "alerts for new issues, and integrate GitHub notifications and contributor "
                "activity updates for teams. prioritize them based on community engagement, "
                "growth and securing worldwide applications",
                "progress": "0%",
                "open": 0,
                "closed": 0,
            },
        ]

        context["milestones"] = milestones
        context["milestone_count"] = len(milestones)
        return context
--------------------------------------------------------------------------------

--- Match 15 ---
File: website/views/slack_handlers.py
Similarity Score: 0.6690
Chunk:
def get_committees_overview(workspace_client, user_id, search_term, activity):
    """Handle committee repository overview and search"""
    try:
        headers = get_github_headers()
        if not GITHUB_TOKEN:
            send_dm(
                workspace_client,
                user_id,
                "Error",
                [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "‚ö†Ô∏è GitHub API token not configured. Please contact the administrator.",
                        },
                    }
                ],
            )
            return

        # If searching for a specific committee
        if search_term:
            # Format committee name to match repository naming convention
            committee_name = f"www-committees-{search_term.lower().replace(' ', '-')}"
            get_committee_details(committee_name, headers, workspace_client, user_id)
            return

        # Get all committee repositories
        search_url = "https://api.github.com/search/repositories"
        params = {"q": "org:OWASP www-committee in:name", "sort": "updated", "order": "desc", "per_page": 100}

        response = requests.get(search_url, headers=headers, params=params, timeout=10)

        if response.status_code != 200:
            send_dm(
                workspace_client,
                user_id,
                "Error",
                [{"type": "section", "text": {"type": "mrkdwn", "text": "‚ùå Failed to fetch committee repositories."}}],
            )
            return

        repos = response.json()["items"]

        # Store pagination data
        pagination_data[user_id] = {"repos": repos, "current_page": 0, "page_size": 5}

        # Send first page
        send_committee_page(workspace_client, user_id, repos[:5])

    except Exception as e:
        print(f"Error in get_committees_overview: {str(e)}")
        activity.success = False
        activity.error_message = str(e)
        activity.save()
        send_dm(
            workspace_client,
            user_id,
            "Error",
            [
                {
                    "type": "section",
                    "text": {"type": "mrkdwn", "text": "‚ùå An error occurred while fetching committee information."},
                }
            ],
        )
--------------------------------------------------------------------------------

